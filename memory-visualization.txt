// frontend/src/components/MemoryVisualization.tsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Database, Search, Clock, List, Memory } from 'lucide-react';

interface MemoryItem {
  id: string;
  content: string;
  timestamp: string;
  sentiment: number;
  importance: number;
  category?: string;
}

interface MemoryVisualizationProps {
  memories: MemoryItem[];
  onMemorySearch: (query: string) => Promise<void>;
}

const MemoryVisualization: React.FC<MemoryVisualizationProps> = ({
  memories,
  onMemorySearch
}) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [filter, setFilter] = useState('all');
  const [selectedMemory, setSelectedMemory] = useState<MemoryItem | null>(null);
  
  // Filter memories based on selected filter
  const filteredMemories = memories.filter(memory => {
    if (filter === 'all') return true;
    if (filter === 'positive') return memory.sentiment > 0.6;
    if (filter === 'negative') return memory.sentiment < 0.4;
    if (filter === 'important') return memory.importance > 0.7;
    return true;
  });
  
  // Sort memories by recency
  const sortedMemories = [...filteredMemories].sort(
    (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
  );
  
  const handleSearch = async () => {
    if (!searchQuery.trim()) return;
    await onMemorySearch(searchQuery);
  };
  
  const getMemorySentimentColor = (sentiment: number) => {
    if (sentiment > 0.6) return 'bg-green-100 border-green-300 dark:bg-green-900 dark:border-green-700';
    if (sentiment < 0.4) return 'bg-red-100 border-red-300 dark:bg-red-900 dark:border-red-700';
    return 'bg-gray-100 border-gray-300 dark:bg-gray-800 dark:border-gray-700';
  };
  
  const getImportanceIndicator = (importance: number) => {
    const dots = [];
    const fullDots = Math.round(importance * 5);
    
    for (let i = 0; i < 5; i++) {
      dots.push(
        <div 
          key={i}
          className={`w-1.5 h-1.5 rounded-full ${
            i < fullDots 
              ? 'bg-blue-500 dark:bg-blue-400' 
              : 'bg-gray-300 dark:bg-gray-600'
          }`}
        />
      );
    }
    
    return <div className="flex space-x-1">{dots}</div>;
  };
  
  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow h-full flex flex-col">
      <div className="p-4 border-b">
        <h3 className="text-lg font-medium mb-4 flex items-center">
          <Memory className="w-5 h-5 mr-2" />
          Memory System
        </h3>
        
        {/* Search bar */}
        <div className="flex space-x-2 mb-4">
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="Search memories..."
            className="flex-1 p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
          />
          <button
            onClick={handleSearch}
            className="p-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            <Search className="w-5 h-5" />
          </button>
        </div>
        
        {/* Filter tabs */}
        <div className="flex space-x-1">
          <button
            onClick={() => setFilter('all')}
            className={`px-3 py-1 rounded text-sm ${
              filter === 'all' 
                ? 'bg-blue-500 text-white' 
                : 'bg-gray-100 dark:bg-gray-700'
            }`}
          >
            All
          </button>
          <button
            onClick={() => setFilter('positive')}
            className={`px-3 py-1 rounded text-sm ${
              filter === 'positive' 
                ? 'bg-green-500 text-white' 
                : 'bg-gray-100 dark:bg-gray-700'
            }`}
          >
            Positive
          </button>
          <button
            onClick={() => setFilter('negative')}
            className={`px-3 py-1 rounded text-sm ${
              filter === 'negative' 
                ? 'bg-red-500 text-white' 
                : 'bg-gray-100 dark:bg-gray-700'
            }`}
          >
            Negative
          </button>
          <button
            onClick={() => setFilter('important')}
            className={`px-3 py-1 rounded text-sm ${
              filter === 'important' 
                ? 'bg-purple-500 text-white' 
                : 'bg-gray-100 dark:bg-gray-700'
            }`}
          >
            Important
          </button>
        </div>
      </div>
      
      {/* Memory list */}
      <div className="flex-1 overflow-y-auto p-2">
        {sortedMemories.length === 0 ? (
          <div className="text-center p-4 text-gray-500">
            No memories found
          </div>
        ) : (
          sortedMemories.map((memory) => (
            <motion.div
              key={memory.id}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
              className={`p-3 border rounded-lg mb-3 cursor-pointer ${getMemorySentimentColor(memory.sentiment)}`}
              onClick={() => setSelectedMemory(memory)}
            >
              <div className="text-sm mb-2 line-clamp-2">{memory.content}</div>
              <div className="flex justify-between items-center">
                <div className="text-xs text-gray-500 dark:text-gray-400 flex items-center">
                  <Clock className="w-3 h-3 mr-1" />
                  {new Date(memory.timestamp).toLocaleDateString()}
                </div>
                {getImportanceIndicator(memory.importance)}
              </div>
            </motion.div>
          ))
        )}
      </div>
      
      {/* Memory details modal */}
      {selectedMemory && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg w-full max-w-lg mx-4"
          >
            <div className="flex justify-between mb-4">
              <h3 className="text-lg font-medium">Memory Details</h3>
              <button 
                onClick={() => setSelectedMemory(null)}
                className="text-gray-500 hover:text-gray-700"
              >
                &times;
              </button>
            </div>
            
            <div className="mb-4">
              <div className="text-sm text-gray-500 dark:text-gray-400 mb-1">
                Content
              </div>
              <div className="p-3 bg-gray-100 dark:bg-gray-700 rounded">
                {selectedMemory.content}
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4 mb-4">
              <div>
                <div className="text-sm text-gray-500 dark:text-gray-400 mb-1">
                  Timestamp
                </div>
                <div className="p-2 bg-gray-100 dark:bg-gray-700 rounded">
                  {new Date(selectedMemory.timestamp).toLocaleString()}
                </div>
              </div>
              
              <div>
                <div className="text-sm text-gray-500 dark:text-gray-400 mb-1">
                  Category
                </div>
                <div className="p-2 bg-gray-100 dark:bg-gray-700 rounded">
                  {selectedMemory.category || 'General'}
                </div>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <div className="text-sm text-gray-500 dark:text-gray-400 mb-1">
                  Sentiment
                </div>
                <div className="w-full h-2 bg-gray-200 dark:bg-gray-600 rounded-full overflow-hidden">
                  <div
                    className={`h-full rounded-full ${
                      selectedMemory.sentiment > 0.6 
                        ? 'bg-green-500' 
                        : selectedMemory.sentiment < 0.4 
                        ? 'bg-red-500' 
                        : 'bg-yellow-500'
                    }`}
                    style={{ width: `${selectedMemory.sentiment * 100}%` }}
                  />
                </div>
              </div>
              
              <div>
                <div className="text-sm text-gray-500 dark:text-gray-400 mb-1">
                  Importance
                </div>
                <div className="w-full h-2 bg-gray-200 dark:bg-gray-600 rounded-full overflow-hidden">
                  <div
                    className="h-full bg-blue-500 rounded-full"
                    style={{ width: `${selectedMemory.importance * 100}%` }}
                  />
                </div>
              </div>
            </div>
          </motion.div>
        </div>
      )}
    </div>
  );
};

export default MemoryVisualization;
