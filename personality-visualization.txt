// frontend/src/components/PersonalityVisualization.tsx
import React from 'react';
import { ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, Radar } from 'recharts';

interface PersonalityData {
  trait: string;
  value: number;
  fullMark: number;
}

interface EmotionData {
  emotion: string;
  score: number;
}

interface PersonalityVisualizationProps {
  traits: Record<string, number>;
  emotions?: Record<string, number>;
  mood?: {
    valence: number;
    arousal: number;
    dominance: number;
  };
}

const PersonalityVisualization: React.FC<PersonalityVisualizationProps> = ({ 
  traits, 
  emotions, 
  mood 
}) => {
  // Format traits for radar chart
  const traitData: PersonalityData[] = Object.entries(traits).map(([trait, value]) => ({
    trait: trait.charAt(0).toUpperCase() + trait.slice(1),
    value: value * 100,
    fullMark: 100
  }));
  
  // Format emotions if available
  const emotionData: EmotionData[] = emotions 
    ? Object.entries(emotions)
        .filter(([_, score]) => score > 0.05)
        .map(([emotion, score]) => ({
          emotion: emotion.charAt(0).toUpperCase() + emotion.slice(1),
          score: score * 100
        }))
        .sort((a, b) => b.score - a.score)
        .slice(0, 5)
    : [];
  
  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
      <h3 className="text-lg font-medium mb-4">Personality Profile</h3>
      
      {/* Personality Radar Chart */}
      <div className="h-64 mb-6">
        <ResponsiveContainer width="100%" height="100%">
          <RadarChart cx="50%" cy="50%" outerRadius="80%" data={traitData}>
            <PolarGrid />
            <PolarAngleAxis dataKey="trait" />
            <Radar
              name="Personality"
              dataKey="value"
              stroke="#8884d8"
              fill="#8884d8"
              fillOpacity={0.6}
            />
          </RadarChart>
        </ResponsiveContainer>
      </div>
      
      {/* Mood Visualization */}
      {mood && (
        <div className="mb-6">
          <h4 className="text-md font-medium mb-2">Current Mood</h4>
          <div className="grid grid-cols-3 gap-2">
            <div className="p-3 bg-gray-100 dark:bg-gray-700 rounded">
              <div className="text-sm text-gray-500 dark:text-gray-400">Valence</div>
              <div className="text-lg font-semibold">{(mood.valence * 100).toFixed(0)}%</div>
              <div className="text-xs">{mood.valence > 0.5 ? 'Positive' : 'Negative'}</div>
            </div>
            <div className="p-3 bg-gray-100 dark:bg-gray-700 rounded">
              <div className="text-sm text-gray-500 dark:text-gray-400">Arousal</div>
              <div className="text-lg font-semibold">{(mood.arousal * 100).toFixed(0)}%</div>
              <div className="text-xs">{mood.arousal > 0.5 ? 'Energetic' : 'Calm'}</div>
            </div>
            <div className="p-3 bg-gray-100 dark:bg-gray-700 rounded">
              <div className="text-sm text-gray-500 dark:text-gray-400">Dominance</div>
              <div className="text-lg font-semibold">{(mood.dominance * 100).toFixed(0)}%</div>
              <div className="text-xs">{mood.dominance > 0.5 ? 'Confident' : 'Submissive'}</div>
            </div>
          </div>
        </div>
      )}
      
      {/* Emotions Bar Chart */}
      {emotionData.length > 0 && (
        <div>
          <h4 className="text-md font-medium mb-2">Current Emotions</h4>
          <div className="space-y-2">
            {emotionData.map(item => (
              <div key={item.emotion} className="w-full">
                <div className="flex justify-between mb-1">
                  <span className="text-sm">{item.emotion}</span>
                  <span className="text-sm">{item.score.toFixed(0)}%</span>
                </div>
                <div className="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-blue-500 rounded-full"
                    style={{ width: `${item.score}%` }}
                  />
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default PersonalityVisualization;
